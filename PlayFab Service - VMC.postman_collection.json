{
  "info": {
    "_postman_id": "2aa298d9-29b3-4cdd-8889-9552243b07df",
    "name": "PlayFab Service | VMC",
    "description": "Complete Postman collection for the View-MarketplaceNET PlayFab service (Express API). All names and descriptions are in English, request examples are tidy, and tests are included (including ETag round-trips where applicable).\n\nSetup:\n1) Set {{baseUrl}} to your running instance, including scheme (e.g., https://testing.view-marketplace.net or http://localhost:3000).\n2) Title aliases originate from src/data/titles.json (examples: prod, bedrock, edu, demo, staging, stage, dev, experimental, creator).\n3) Variables used across requests: {{creator1}} / {{creator2}} (CubeCraftGames / TheHive), {{keyword}} (Rank), {{tag}} (hidden_offer), {{itemId}}, {{friendlyId}}.\n4) ETag-aware endpoints have tests that also re-request with If-None-Match to expect 304.\n\nNotes:\n- Marketplace endpoints support ETag via middleware/etag.js.\n- /marketplace/search requires both creatorName and keyword.\n- /marketplace/free enforces price==0 server-side; supports optional creatorName filter.\n- /marketplace/latest supports optional ?count (capped at 50 by the controller).\n- /marketplace/compare spans all titles for a given creator.\n- Featured servers are defined under src/config/featuredServers.js.\n- Admin Webhooks: this collection adds **List webhooks** and helper test scripts that persist {{webhookId}} and counts for convenience.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "37965769"
  },
  "item": [
    {
      "name": "Auth & Meta",
      "item": [
        {
          "name": "POST /login → get API token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let data;",
                  "try {",
                  "  data = pm.response.json();",
                  "} catch (e) {",
                  "  pm.test(\"Response is JSON\", function () {",
                  "    pm.expect.fail(\"Response is not valid JSON\");",
                  "  });",
                  "}",
                  "",
                  "const token = data?.token;",
                  "pm.test(\"Token is present\", function () {",
                  "  pm.expect(token, \"Token missing in login response\").to.exist;",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"token\", token || \"\");",
                  "",
                  "// Try to decode JWT to extract exp (if it is a JWT)",
                  "try {",
                  "  const payload = JSON.parse(atob(String(token).split('.')[1]));",
                  "  if (payload?.exp) pm.collectionVariables.set(\"token_exp\", payload.exp);",
                  "} catch (e) {",
                  "  // ignore non-JWT tokens",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": { "type": "noauth" },
            "method": "POST",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"username\": \"adm7nQwR4vZ\", \"password\": \"X9uYcV7rPq1LmE\" }",
              "options": { "raw": { "language": "json" } }
            },
            "url": { "raw": "{{baseUrl}}/login", "host": [ "{{baseUrl}}" ], "path": [ "login" ] }
          },
          "response": []
        },
        {
          "name": "GET /openapi.json → OpenAPI document",
          "request": {
            "method": "GET",
            "header": [ { "key": "Accept", "value": "application/json" } ],
            "url": { "raw": "{{baseUrl}}/openapi.json", "host": [ "{{baseUrl}}" ], "path": [ "openapi.json" ] }
          },
          "response": []
        },
        {
          "name": "GET /session/:alias → basic session (example: prod)",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "url": { "raw": "{{baseUrl}}/session/{{alias_prod}}", "host": [ "{{baseUrl}}" ], "path": [ "session", "{{alias_prod}}" ] }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Creators",
      "item": [
        {
          "name": "GET /creators → all creators",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "pm.test(\"Response is an array\", () => Array.isArray(pm.response.json()));",
                  "pm.test(\"Creator objects include creatorName & displayName\", () => {",
                  "  const arr = pm.response.json();",
                  "  if (arr.length) {",
                  "    pm.expect(arr[0]).to.have.property('creatorName');",
                  "    pm.expect(arr[0]).to.have.property('displayName');",
                  "  }",
                  "});",
                  "pm.test(\"Response time < 3000ms\", () => pm.response.responseTime < 3000);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "url": { "raw": "{{baseUrl}}/creators", "host": [ "{{baseUrl}}" ], "path": [ "creators" ] },
            "description": "Returns all creators from src/data/creators.json."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Titles",
      "item": [
        {
          "name": "GET /titles → list titles (alias, id, notes)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "pm.test(\"Response is an array\", () => Array.isArray(pm.response.json()));",
                  "pm.test(\"First entry has alias & id\", () => {",
                  "  const arr = pm.response.json();",
                  "  if (arr.length) {",
                  "    pm.expect(arr[0]).to.have.property('alias');",
                  "    pm.expect(arr[0]).to.have.property('id');",
                  "  }",
                  "});",
                  "pm.test(\"Response time < 3000ms\", () => pm.response.responseTime < 3000);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "url": { "raw": "{{baseUrl}}/titles", "host": [ "{{baseUrl}}" ], "path": [ "titles" ] },
            "description": "Reads all known titles from src/data/titles.json."
          },
          "response": []
        },
        {
          "name": "POST /titles → create a title mapping",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 201\", () => pm.response.code === 201);",
                  "const b = pm.response.json();",
                  "pm.test(\"Echoed alias & id\", () => {",
                  "  pm.expect(b).to.have.property('alias');",
                  "  pm.expect(b).to.have.property('id');",
                  "});",
                  "pm.collectionVariables.set('created_alias', b.alias);",
                  "pm.collectionVariables.set('created_id', b.id);",
                  "pm.test(\"Response time < 4000ms\", () => pm.response.responseTime < 4000);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alias\": \"{{new_alias}}\",\n  \"id\": \"{{new_id}}\",\n  \"notes\": \"Created via Postman at {{ts}}\"\n}"
            },
            "url": { "raw": "{{baseUrl}}/titles", "host": [ "{{baseUrl}}" ], "path": [ "titles" ] },
            "description": "Creates a new title mapping. Uses {{new_alias}} and {{new_id}} variables."
          },
          "response": []
        },
        {
          "name": "DELETE /titles/:alias → delete title (uses created_alias or alias_to_delete)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('created_alias')) {",
                  "  pm.request.url = pm.request.url.toString().replace('{{created_alias}}', pm.collectionVariables.get('alias_to_delete'));",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "pm.test(\"Body has 'deleted' field\", () => {",
                  "  const b = pm.response.json();",
                  "  pm.expect(b).to.have.property('deleted');",
                  "});",
                  "pm.test(\"Response time < 3000ms\", () => pm.response.responseTime < 3000);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "url": { "raw": "{{baseUrl}}/titles/{{created_alias}}", "host": [ "{{baseUrl}}" ], "path": [ "titles", "{{created_alias}}" ] },
            "description": "Deletes the title created in the previous step. Falls back to {{alias_to_delete}} if the collection variable is missing."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Session",
      "item": [
        {
          "name": "GET /session/:alias → session for 'prod'",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "const b = pm.response.json();",
                  "pm.test(\"Has EntityToken\", () => pm.expect(b).to.have.property('EntityToken'));",
                  "pm.test(\"Has SessionTicket & PlayFabId\", () => {",
                  "  pm.expect(b).to.have.property('SessionTicket');",
                  "  pm.expect(b).to.have.property('PlayFabId');",
                  "});",
                  "pm.test(\"Response time < 7000ms\", () => pm.response.responseTime < 7000);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "url": { "raw": "{{baseUrl}}/session/{{alias_prod}}", "host": [ "{{baseUrl}}" ], "path": [ "session", "{{alias_prod}}" ] },
            "description": "Returns PlayFab session { SessionTicket, PlayFabId, EntityToken } for the given alias."
          },
          "response": []
        },
        {
          "name": "GET /session/:alias → session for 'bedrock'",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "const b = pm.response.json();",
                  "pm.test(\"Has EntityToken\", () => pm.expect(b).to.have.property('EntityToken'));",
                  "pm.test(\"Response time < 7000ms\", () => pm.response.responseTime < 7000);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "url": { "raw": "{{baseUrl}}/session/{{alias_bedrock}}", "host": [ "{{baseUrl}}" ], "path": [ "session", "{{alias_bedrock}}" ] },
            "description": "Returns PlayFab session for alias 'bedrock'."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Marketplace",
      "item": [
        {
          "name": "All",
          "description": "All items for a given title alias. ETag-enabled; tests include 304 re-fetch.",
          "item": [
            {
              "name": "GET /marketplace/all/:alias → all items (no filters, prod)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200\", () => pm.response.code === 200);",
                      "pm.test(\"ETag present\", () => {",
                      "  const et = pm.response.headers.get('ETag');",
                      "  pm.collectionVariables.set('etag_all_prod', et || '');",
                      "  pm.expect(Boolean(et)).to.be.true;",
                      "});",
                      "pm.test(\"Body is array (possibly empty)\", () => {",
                      "  const body = pm.response.json();",
                      "  pm.expect(Array.isArray(body)).to.be.true;",
                      "});",
                      "pm.test(\"Response time < 8000ms\", () => pm.response.responseTime < 8000);",
                      "// Re-request with If-None-Match to validate 304",
                      "const et = pm.collectionVariables.get('etag_all_prod');",
                      "if (et) {",
                      "  pm.sendRequest({",
                      "    url: pm.request.url.toString(),",
                      "    method: 'GET',",
                      "    header: [{ key: 'If-None-Match', value: et }, { key: 'Accept', value: 'application/json' }]",
                      "  }, (err, res) => {",
                      "    if (err) { pm.expect.fail(String(err)); }",
                      "    else { pm.expect([304,200]).to.include(res.code); }",
                      "  });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/all/{{alias_prod}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "all", "{{alias_prod}}" ] }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/all/:alias → filter by creatorName={{creator1}}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200\", () => pm.response.code === 200);",
                      "pm.test(\"ETag present\", () => pm.expect(Boolean(pm.response.headers.get('ETag'))).to.be.true);",
                      "pm.test(\"Array response\", () => Array.isArray(pm.response.json()));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/all/{{alias_prod}}?creatorName={{creator1}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "all", "{{alias_prod}}" ],
                  "query": [ { "key": "creatorName", "value": "{{creator1}}" } ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/all/:alias → filter by creatorName={{creator2}}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200\", () => pm.response.code === 200);",
                      "pm.test(\"ETag present\", () => pm.expect(Boolean(pm.response.headers.get('ETag'))).to.be.true);",
                      "pm.test(\"Array response\", () => Array.isArray(pm.response.json()));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/all/{{alias_prod}}?creatorName={{creator2}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "all", "{{alias_prod}}" ],
                  "query": [ { "key": "creatorName", "value": "{{creator2}}" } ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/all/:alias → filter by tag={{tag}}",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200\", () => pm.response.code === 200);",
                      "pm.test(\"ETag present\", () => pm.expect(Boolean(pm.response.headers.get('ETag'))).to.be.true);",
                      "pm.test(\"Array response\", () => Array.isArray(pm.response.json()));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/all/{{alias_prod}}?tag={{tag}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "all", "{{alias_prod}}" ],
                  "query": [ { "key": "tag", "value": "{{tag}}" } ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/all/:alias → filter by creatorName+tag",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200\", () => pm.response.code === 200);",
                      "pm.test(\"ETag present\", () => pm.expect(Boolean(pm.response.headers.get('ETag'))).to.be.true);",
                      "pm.test(\"Array response\", () => Array.isArray(pm.response.json()));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/all/{{alias_prod}}?creatorName={{creator1}}&tag={{tag}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "all", "{{alias_prod}}" ],
                  "query": [
                    { "key": "creatorName", "value": "{{creator1}}" },
                    { "key": "tag", "value": "{{tag}}" }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/all/:alias → all items (bedrock, no filters)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200\", () => pm.response.code === 200);",
                      "pm.test(\"ETag present\", () => pm.expect(Boolean(pm.response.headers.get('ETag'))).to.be.true);",
                      "pm.test(\"Array response\", () => Array.isArray(pm.response.json()));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/all/{{alias_bedrock}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "all", "{{alias_bedrock}}" ] }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Latest",
          "description": "Latest items for a title. Optional ?count (1..50). ETag-enabled; includes ETag checks.",
          "item": [
            {
              "name": "GET /marketplace/latest/:alias?count=10 (prod, no filters)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200\", () => pm.response.code === 200);",
                      "pm.test(\"ETag present\", () => pm.expect(Boolean(pm.response.headers.get('ETag'))).to.be.true);",
                      "pm.test(\"Array length <= 10\", () => {",
                      "  const arr = pm.response.json();",
                      "  pm.expect(Array.isArray(arr)).to.be.true;",
                      "  pm.expect(arr.length).to.be.at.most(10);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/latest/{{alias_prod}}?count=10",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "latest", "{{alias_prod}}" ],
                  "query": [ { "key": "count", "value": "10" } ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/latest/:alias?count=25 (prod, no filters)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/latest/{{alias_prod}}?count=25",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "latest", "{{alias_prod}}" ],
                  "query": [ { "key": "count", "value": "25" } ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/latest/:alias?count=50 (prod, cap)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/latest/{{alias_prod}}?count=50",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "latest", "{{alias_prod}}" ],
                  "query": [ { "key": "count", "value": "50" } ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/latest/:alias?count=25&creatorName={{creator1}}",
              "request": {
                "method": "GET",
                "header": [ { "key": "Accept", "value": "application/json" } ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/latest/{{alias_prod}}?count=25&creatorName={{creator1}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "latest", "{{alias_prod}}" ],
                  "query": [
                    { "key": "count", "value": "25" },
                    { "key": "creatorName", "value": "{{creator1}}" }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/latest/:alias?count=25&creatorName={{creator2}}",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/latest/{{alias_prod}}?count=25&creatorName={{creator2}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "latest", "{{alias_prod}}" ],
                  "query": [
                    { "key": "count", "value": "25" },
                    { "key": "creatorName", "value": "{{creator2}}" }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/latest/:alias?count=25&tag={{tag}}",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/latest/{{alias_prod}}?count=25&tag={{tag}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "latest", "{{alias_prod}}" ],
                  "query": [
                    { "key": "count", "value": "25" },
                    { "key": "tag", "value": "{{tag}}" }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/latest/:alias?count=25&creatorName={{creator1}}&tag={{tag}}",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/latest/{{alias_prod}}?count=25&creatorName={{creator1}}&tag={{tag}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "latest", "{{alias_prod}}" ],
                  "query": [
                    { "key": "count", "value": "25" },
                    { "key": "creatorName", "value": "{{creator1}}" },
                    { "key": "tag", "value": "{{tag}}" }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/latest/:alias?count=10 (bedrock)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/latest/{{alias_bedrock}}?count=10",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "latest", "{{alias_bedrock}}" ],
                  "query": [ { "key": "count", "value": "10" } ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Popular",
          "description": "Popular items ordered by rating/totalcount descending. ETag-enabled.",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response) { pm.test(\"Status 200\", () => [200,304].includes(pm.response.code)); }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "item": [
            {
              "name": "GET /marketplace/popular/:alias (prod, no filters)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/popular/{{alias_prod}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "popular", "{{alias_prod}}" ] }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/popular/:alias?creatorName={{creator1}}",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/popular/{{alias_prod}}?creatorName={{creator1}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "popular", "{{alias_prod}}" ],
                  "query": [ { "key": "creatorName", "value": "{{creator1}}" } ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/popular/:alias?creatorName={{creator2}}",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/popular/{{alias_prod}}?creatorName={{creator2}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "popular", "{{alias_prod}}" ],
                  "query": [ { "key": "creatorName", "value": "{{creator2}}" } ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/popular/:alias?creatorName={{creator1}}&tag={{tag}}",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/popular/{{alias_prod}}?creatorName={{creator1}}&tag={{tag}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "popular", "{{alias_prod}}" ],
                  "query": [
                    { "key": "creatorName", "value": "{{creator1}}" },
                    { "key": "tag", "value": "{{tag}}" }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Free",
          "description": "Free items only (DisplayProperties/price == 0). ETag-enabled. Optional creatorName filter.",
          "item": [
            {
              "name": "GET /marketplace/free/:alias (prod, no filters)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/free/{{alias_prod}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "free", "{{alias_prod}}" ] }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/free/:alias?creatorName={{creator1}}",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/free/{{alias_prod}}?creatorName={{creator1}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "free", "{{alias_prod}}" ],
                  "query": [ { "key": "creatorName", "value": "{{creator1}}" } ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/free/:alias?creatorName={{creator2}}",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/free/{{alias_prod}}?creatorName={{creator2}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "free", "{{alias_prod}}" ],
                  "query": [ { "key": "creatorName", "value": "{{creator2}}" } ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Tag",
          "description": "Items filtered by a given tag using /marketplace/tag/:alias/:tag. ETag-enabled.",
          "item": [
            {
              "name": "GET /marketplace/tag/:alias/:tag (prod)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/tag/{{alias_prod}}/{{tag}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "tag", "{{alias_prod}}", "{{tag}}" ] }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/tag/:alias/:tag (bedrock)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/tag/{{alias_bedrock}}/{{tag}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "tag", "{{alias_bedrock}}", "{{tag}}" ] }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Search",
          "description": "Search by creatorName + keyword.",
          "item": [
            {
              "name": "GET /marketplace/search/:alias?creatorName={{creator1}}&keyword={{keyword}} (prod)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/search/{{alias_prod}}?creatorName={{creator1}}&keyword={{keyword}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "search", "{{alias_prod}}" ],
                  "query": [
                    { "key": "creatorName", "value": "{{creator1}}" },
                    { "key": "keyword", "value": "{{keyword}}" }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/search/:alias?creatorName={{creator2}}&keyword={{keyword}} (prod)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": {
                  "raw": "{{baseUrl}}/marketplace/search/{{alias_prod}}?creatorName={{creator2}}&keyword={{keyword}}",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "search", "{{alias_prod}}" ],
                  "query": [
                    { "key": "creatorName", "value": "{{creator2}}" },
                    { "key": "keyword", "value": "{{keyword}}" }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Details",
          "description": "Full multilingual item details for a specific itemId. ETag-enabled.",
          "item": [
            {
              "name": "GET /marketplace/details/:alias/:itemId (prod)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200 or 404\", () => [200,404].includes(pm.response.code));",
                      "if (pm.response.code === 200) {",
                      "  const b = pm.response.json();",
                      "  pm.test(\"Has Id\", () => pm.expect(b).to.have.property('Id'));",
                      "  pm.test(\"ETag present\", () => pm.expect(Boolean(pm.response.headers.get('ETag'))).to.be.true);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/details/{{alias_prod}}/{{itemId}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "details", "{{alias_prod}}", "{{itemId}}" ] }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/details/:alias/:itemId (bedrock)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/details/{{alias_bedrock}}/{{itemId}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "details", "{{alias_bedrock}}", "{{itemId}}" ] }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Friendly",
          "description": "Fetch a single item by FriendlyId. ETag-enabled.",
          "item": [
            {
              "name": "GET /marketplace/friendly/:alias/:friendlyId (prod)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/friendly/{{alias_prod}}/{{friendlyId}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "friendly", "{{alias_prod}}", "{{friendlyId}}" ] }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/friendly/:alias/:friendlyId (bedrock)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/friendly/{{alias_bedrock}}/{{friendlyId}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "friendly", "{{alias_bedrock}}", "{{friendlyId}}" ] }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Summary",
          "description": "Returns a lightweight summary for all items (id, title, URLs). ETag-enabled.",
          "item": [
            {
              "name": "GET /marketplace/summary/:alias (prod)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/summary/{{alias_prod}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "summary", "{{alias_prod}}" ] }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/summary/:alias (bedrock)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/summary/{{alias_bedrock}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "summary", "{{alias_bedrock}}" ] }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Compare",
          "description": "Compare items across all titles for a single creator.",
          "item": [
            {
              "name": "GET /marketplace/compare/:creatorName ({{creator1}})",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200\", () => pm.response.code === 200);",
                      "pm.test(\"Response is an object keyed by alias\", () => {",
                      "  const b = pm.response.json();",
                      "  pm.expect(b).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/compare/{{creator1}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "compare", "{{creator1}}" ] }
              },
              "response": []
            },
            {
              "name": "GET /marketplace/compare/:creatorName ({{creator2}})",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Accept", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
                ],
                "url": { "raw": "{{baseUrl}}/marketplace/compare/{{creator2}}", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "compare", "{{creator2}}" ] }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Advanced Search",
          "item": [
            {
              "name": "POST /marketplace/search/advanced/:alias → full-text + filters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
                      "pm.test(\"Contains items + meta + facets\", function () {",
                      "  const json = pm.response.json();",
                      "  pm.expect(json).to.have.property('items');",
                      "  pm.expect(json).to.have.property('meta');",
                      "  pm.expect(json).to.have.property('facets');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" },
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"survival\",\n  \"filters\": {\n    \"tags\": [\"adventure\", \"multiplayer\"],\n    \"priceMin\": 0,\n    \"priceMax\": 1990,\n    \"contentTypes\": [\"world\", \"skinpack\"]\n  },\n  \"sort\": [\n    { \"field\": \"creationDate\", \"dir\": \"desc\" }\n  ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/marketplace/search/advanced/{{alias_prod}}?page=1&pageSize=24",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "search", "advanced", "{{alias_prod}}" ],
                  "query": [
                    { "key": "page", "value": "1" },
                    { "key": "pageSize", "value": "24" }
                  ]
                },
                "description": "Runs an advanced search with full-text and simple filters."
              },
              "response": []
            },
            {
              "name": "POST /marketplace/search/advanced/:alias → by creator + date window",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Facets present\", () => { const j = pm.response.json(); pm.expect(j.facets).to.be.an('object'); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" },
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"filters\": {\n    \"creatorName\": \"Lifeboat\",\n    \"createdFrom\": \"2025-01-01T00:00:00.000Z\",\n    \"createdTo\": \"2025-12-31T23:59:59.000Z\"\n  },\n  \"sort\": [\n    { \"field\": \"rating/totalcount\", \"dir\": \"desc\" }\n  ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/marketplace/search/advanced/{{alias_prod}}?page=1&pageSize=12",
                  "host": [ "{{baseUrl}}" ],
                  "path": [ "marketplace", "search", "advanced", "{{alias_prod}}" ],
                  "query": [
                    { "key": "page", "value": "1" },
                    { "key": "pageSize", "value": "12" }
                  ]
                },
                "description": "Creator-focused advanced search with a narrow date window and rating-based sort."
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Events – Sales SSE",
      "item": [
        {
          "name": "GET /events/sales/stream → SSE sales stream",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Content-Type is SSE\", () => pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream'));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" },
              { "key": "Accept", "value": "text/event-stream" },
              { "key": "Cache-Control", "value": "no-store" },
              { "key": "Connection", "value": "keep-alive" }
            ],
            "url": { "raw": "{{baseUrl}}/events/sales/stream", "host": [ "{{baseUrl}}" ], "path": [ "events", "sales", "stream" ] },
            "description": "Subscribes to server-sent events for sales updates. Postman will display the initial chunk only; for continuous testing prefer curl or a streaming client."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin – Webhooks",
      "item": [
        {
          "name": "GET /admin/webhooks → list webhooks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "let j;",
                  "try { j = pm.response.json(); } catch (e) { pm.expect.fail('Response is not JSON'); }",
                  "const items = Array.isArray(j) ? j : (j && j.items) ? j.items : [];",
                  "pm.test(\"List returned\", () => pm.expect(items).to.be.an('array'));",
                  "pm.collectionVariables.set('webhookCount', String(items.length || 0));",
                  "if (items.length) {",
                  "  const first = items[0];",
                  "  pm.collectionVariables.set('webhookId', first.id || '');",
                  "  pm.test(\"First item has id/url/event\", () => {",
                  "    pm.expect(first).to.have.property('id');",
                  "    pm.expect(first).to.have.property('url');",
                  "    pm.expect(first).to.have.property('event');",
                  "  });",
                  "} else {",
                  "  pm.collectionVariables.set('webhookId', '');",
                  "}",
                  "console.log('webhooks:', items.map(w => ({ id: w.id, event: w.event, provider: w.provider })));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "url": { "raw": "{{baseUrl}}/admin/webhooks", "host": [ "{{baseUrl}}" ], "path": [ "admin", "webhooks" ] }
          },
          "response": []
        },
        {
          "name": "POST /admin/webhooks → register webhook (sale.update)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
                  "const j = pm.response.json();",
                  "pm.test(\"Webhook object present\", () => pm.expect(j.webhook).to.be.an('object'));",
                  "pm.collectionVariables.set('lastWebhookId', j.webhook.id || '');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"sale.update\",\n  \"url\": \"{{webhookUrl}}\",\n  \"secret\": \"{{webhookSecret}}\",\n  \"provider\": \"{{webhookProvider}}\"\n}"
            },
            "url": { "raw": "{{baseUrl}}/admin/webhooks", "host": [ "{{baseUrl}}" ], "path": [ "admin", "webhooks" ] },
            "description": "Registers a webhook for sales updates."
          },
          "response": []
        },
        {
          "name": "POST /admin/webhooks → register webhook (item.created)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"item.created\",\n  \"url\": \"{{webhookUrl}}\",\n  \"secret\": \"{{webhookSecret}}\",\n  \"provider\": \"{{webhookProvider}}\"\n}"
            },
            "url": { "raw": "{{baseUrl}}/admin/webhooks", "host": [ "{{baseUrl}}" ], "path": [ "admin", "webhooks" ] },
            "description": "Registers a webhook for newly created items."
          },
          "response": []
        },
        {
          "name": "POST /admin/webhooks → register webhook (item.updated)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"item.updated\",\n  \"url\": \"{{webhookUrl}}\",\n  \"secret\": \"{{webhookSecret}}\",\n  \"provider\": \"{{webhookProvider}}\"\n}"
            },
            "url": { "raw": "{{baseUrl}}/admin/webhooks", "host": [ "{{baseUrl}}" ], "path": [ "admin", "webhooks" ] },
            "description": "Registers a webhook for item updates."
          },
          "response": []
        },
        {
          "name": "POST /admin/webhooks → register webhook (price.changed)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"price.changed\",\n  \"url\": \"{{webhookUrl}}\",\n  \"secret\": \"{{webhookSecret}}\",\n  \"provider\": \"{{webhookProvider}}\"\n}"
            },
            "url": { "raw": "{{baseUrl}}/admin/webhooks", "host": [ "{{baseUrl}}" ], "path": [ "admin", "webhooks" ] },
            "description": "Registers a webhook for price changes."
          },
          "response": []
        },
        {
          "name": "POST /admin/webhooks → register webhook (creator.trending)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"creator.trending\",\n  \"url\": \"{{webhookUrl}}\",\n  \"secret\": \"{{webhookSecret}}\",\n  \"provider\": \"{{webhookProvider}}\"\n}"
            },
            "url": { "raw": "{{baseUrl}}/admin/webhooks", "host": [ "{{baseUrl}}" ], "path": [ "admin", "webhooks" ] },
            "description": "Registers a webhook for trending creators."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Featured Servers",
      "description": "Predefined featured servers; returns item data and screenshots (if available). ETag-enabled.",
      "item": [
        {
          "name": "GET /marketplace/featured-servers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "pm.test(\"ETag present\", () => pm.expect(Boolean(pm.response.headers.get('ETag'))).to.be.true);",
                  "pm.test(\"Array of server entries\", () => {",
                  "  const arr = pm.response.json();",
                  "  pm.expect(Array.isArray(arr)).to.be.true;",
                  "  if (arr.length) {",
                  "    pm.expect(arr[0]).to.have.property('name');",
                  "    pm.expect(arr[0]).to.have.property('id');",
                  "  }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "url": { "raw": "{{baseUrl}}/marketplace/featured-servers", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "featured-servers" ] }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Sales",
      "item": [
        {
          "name": "GET /marketplace/sales",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "url": { "raw": "{{baseUrl}}/marketplace/sales", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "sales" ] }
          },
          "response": []
        },
        {
          "name": "GET /marketplace/featured-servers (duplicate quick access)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "pm.test(\"ETag present\", () => pm.expect(Boolean(pm.response.headers.get('ETag'))).to.be.true);",
                  "pm.test(\"Array of server entries\", () => {",
                  "  const arr = pm.response.json();",
                  "  pm.expect(Array.isArray(arr)).to.be.true;",
                  "  if (arr.length) {",
                  "    pm.expect(arr[0]).to.have.property('name');",
                  "    pm.expect(arr[0]).to.have.property('id');",
                  "  }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              { "key": "Accept", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}", "type": "text" }
            ],
            "url": { "raw": "{{baseUrl}}/marketplace/featured-servers", "host": [ "{{baseUrl}}" ], "path": [ "marketplace", "featured-servers" ] }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Collection-level pre-request: ensure a timestamp variable for uniqueness in examples",
          "pm.collectionVariables.set(\"ts\", Date.now().toString());"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [ "// Collection-level tests placeholder" ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    { "key": "baseUrl", "value": "https://testing.view-marketplace.net" },
    { "key": "alias_prod", "value": "prod" },
    { "key": "alias_bedrock", "value": "bedrock" },
    { "key": "creator1", "value": "CubeCraftGames" },
    { "key": "creator2", "value": "TheHive" },
    { "key": "keyword", "value": "Rank" },
    { "key": "tag", "value": "hidden_offer" },
    { "key": "itemId", "value": "REPLACE_WITH_REAL_ITEM_ID" },
    { "key": "friendlyId", "value": "REPLACE_WITH_REAL_FRIENDLY_ID" },
    { "key": "alias_to_delete", "value": "demo" },
    { "key": "new_alias", "value": "postman-added-{{ts}}" },
    { "key": "new_id", "value": "PSTMN{{ts}}" },
    { "key": "ts", "value": "" },
    { "key": "created_alias", "value": "" },
    { "key": "created_id", "value": "" },
    { "key": "etag_all_prod", "value": "" },
    { "key": "token", "value": "", "type": "default" },
    { "key": "token_exp", "value": "" },
    { "key": "webhookProvider", "value": "auto" },
    { "key": "webhookUrl", "value": "https://example.com/webhook" },
    { "key": "webhookSecret", "value": "change-me" },
    { "key": "webhookId", "value": "" },
    { "key": "webhookCount", "value": "0" },
    { "key": "lastWebhookId", "value": "" }
  ]
}
